import threading
import time
import random

# Shared resource
data = 0

# Semaphores
mutex = threading.Lock()
write_lock = threading.Lock()
read_count = 0

def reader(reader_id):
    global read_count
    global data
    while True:
        mutex.acquire()
        read_count += 1
        if read_count == 1:
            write_lock.acquire()
        mutex.release()

        # Reading
        print(f"Reader {reader_id} reads data: {data}")
        time.sleep(random.uniform(0.1, 0.5))

        mutex.acquire()
        read_count -= 1
        if read_count == 0:
            write_lock.release()
        mutex.release()
        time.sleep(random.uniform(0.1, 0.5))

def writer(writer_id):
    global data
    while True:
        write_lock.acquire()
        data += 1
        print(f"Writer {writer_id} writes data: {data}")
        time.sleep(random.uniform(0.2, 0.6))
        write_lock.release()
        time.sleep(random.uniform(0.1, 0.5))

if __name__ == "__main__":
    readers = [threading.Thread(target=reader, args=(i,)) for i in range(2)]
    writers = [threading.Thread(target=writer, args=(i,)) for i in range(1)]

    for t in readers + writers:
        t.start()
