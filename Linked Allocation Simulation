# linked_allocation.py
class Block:
    def __init__(self, data, next_block=None):
        self.data = data
        self.next = next_block  # pointer to next block (block id)

class LinkedFileSystem:
    def __init__(self):
        # disk: block_id -> Block
        self.disk = {}
        self.next_free_id = 0

    def allocate_file(self, records_list):
        prev_id = None
        first_id = None
        for rec in records_list:
            block_id = self.next_free_id
            self.next_free_id += 1
            self.disk[block_id] = Block(rec, None)
            if prev_id is not None:
                self.disk[prev_id].next = block_id
            else:
                first_id = block_id
            prev_id = block_id
        last_id = prev_id
        return first_id, last_id

    def read_file(self, first_id):
        cur = first_id
        result = []
        while cur is not None:
            block = self.disk[cur]
            result.append(block.data)
            cur = block.next
        return result

if __name__ == "__main__":
    fs = LinkedFileSystem()
    first, last = fs.allocate_file(["L0","L1","L2","L3"])
    print("First block id:", first, "Last block id:", last)
    print("Read file:", fs.read_file(first))
