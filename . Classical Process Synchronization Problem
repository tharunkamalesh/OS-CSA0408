import threading
import time
import random

BUFFER_SIZE = 5
buffer = []

mutex = threading.Lock()
empty = threading.Semaphore(BUFFER_SIZE)
full = threading.Semaphore(0)

def producer():
    for i in range(10):
        empty.acquire()
        mutex.acquire()
        buffer.append(i)
        print(f"Produced: {i} | Buffer: {buffer}")
        mutex.release()
        full.release()
        time.sleep(random.uniform(0.1, 0.5))

def consumer():
    for _ in range(10):
        full.acquire()
        mutex.acquire()
        item = buffer.pop(0)
        print(f"Consumed: {item} | Buffer: {buffer}")
        mutex.release()
        empty.release()
        time.sleep(random.uniform(0.1, 0.5))

p = threading.Thread(target=producer)
c = threading.Thread(target=consumer)
p.start()
c.start()
p.join()
c.join()
print("Simulation completed.")
